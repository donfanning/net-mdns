TODO

- we are seeing our own questions... good thing?

- we aren't seeing cached answers... bad thing!

- need a unicast-respose bit for query classes in resolv.rb

- raa

- upload

- TXT not returning multiple strings

- resolv.conf looks correct, but I can't resolv www.google.ca!

- Name#<< - append label(s) to a Name


Q can I bind my ifx to a local address?

Q can I recv unicast responses?


Goals:

a)

  - fix Config/timeout/choice of candidates problems

  - test, do lookups, review code

  - remove timeout implementation?

  - produce patches against 1.8

b)

  - refactor into net/dns
  - implement network browwer
  - submit diffs
  - server
  - rinda?
  - client/server in test/unit


Projects:

  - use Message.decode to dump details of tcpdump logs

  - query weather reports, represent as iCalendars, with colors for wet/dry warm/cold!

  - install dns_sd.h API/new mDNSResolver

  - install DNSServiceDiscovery API


Open design issues

- net classes that do socketopts, so you don't have to pack the structs yourself! or maybe
  implement the 8 functions of Stevens?

- factor Resolv::DNS internals into module Net::DNS. As a module, I can do
  include Net::DNS, and use Name, etc.

 - DNS::Name should have to_str to advertise that it can be converted into a string?
   --> net.http can't be used with return values of SRV.target...

 - case equality?


      #  call-seq:
      #     name === obj    => true or false
      #  
      #  Case Equality---Returns <code>true</code> if <i>anObject</i> is an
      #  instance of +name+ or one of +name+'s descendents. Of
      #  limited use for modules, but can be used in <code>case</code>
      #  statements to classify objects by class.

   or maybe when '*.example.com'...

 - maybe I should allow the port to be configurable, so mDNS can run on other
   ports?

 - rename mdns.rb net/dns/multicast.rb?

 - namespace to put MDNS into?

 - get MDNS from Resolv's defaults

 - deal with timeout's

 - allow infinite loops, querying with no timeout


Open resolv.rb questions:

  - reverse DNS lookups done by sock.recv


questions:

  Shouldn't BasicSocket.do_not_reverse_lookup be set? Or be set on our sockets?
  It's weird that in @sock.recv we get a tuple with the address... when we ARE
  a resolver library.... and if you call resolv-replace, won't we call
  ourselves in order to resolve the IP when you call recv to get the peer info?
  And isn't resolv-replace ignoring BasicSocket.do_not_reverse_lookup?  So, it
  is very weird that resolv.rb does ad socket.recv that causes (blocking) DNS
  queries to occure for its peer IP address...

    Related: run ga using -r resolv-replace, see if ruby does the CNAME thing...


