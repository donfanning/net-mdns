TODO

- rename mdns.rb net/dns/multicast.rb

- fix/extend label comparisons, look at Module# <, <=, etc., it is like DNS

- document

- mdns.rb user interface: search for multiple paths, move 'type' to a -t arg

- package

- install

- raa

- upload

- TXT not returning multiple strings

- resolv.conf looks correct, but I can't resolv www.google.ca!

- mdns.rb, do each_resource inside each_resource to test threading

- Name#<< - append label(s) to a Name

- factor Resolv::DNS internals into module Net::DNS. As a module, I can do
  include Net::DNS, and use Name, etc.


Goals:

a)

  - fix Config/timeout/choice of candidates problems

  - test, do lookups, review code

  - remove timeout implementation?

  - produce patches against 1.8

b)

  - refactor into net/dns
  - implement network browwer
  - submit diffs
  - server
  - rinda?
  - client/server in test/unit


Projects:

  - use Message.decode to dump details of tcpdump logs

  - query weather reports, represent as iCalendars, with colors for wet/dry warm/cold!

  - install dns_sd.h API/new mDNSResolver

  - install DNSServiceDiscovery API


Open design issues

 - namespace to put MDNS into

 - get MDNS from Resolv's defaults

 - deal with timeout's

 - allow infinite loops, querying with no timeout


Open resolv.rb questions:

  - reverse DNS lookups done by sock.recv

  - Resolv and built-in resolver use different exception classes.



questions:

  Shouldn't BasicSocket.do_not_reverse_lookup be set? Or be set on our sockets?
  It's weird that in @sock.recv we get a tuple with the address... when we ARE
  a resolver library.... and if you call resolv-replace, won't we call
  ourselves in order to resolve the IP when you call recv to get the peer info?
  And isn't resolv-replace ignoring BasicSocket.do_not_reverse_lookup?  So, it
  is very weird that resolv.rb does ad socket.recv that causes (blocking) DNS
  queries to occure for its peer IP address...

    Related: run ga using -r resolv-replace, see if ruby does the CNAME thing...


Things to take care of from the draft:

-  Any DNS query for a name ending with "254.169.in-addr.arpa." MUST
   be sent to the mDNS multicast address 224.0.0.251.

-  All Multicast DNS responses (including responses sent via unicast)
   MUST be sent with IP TTL set to 255.

-  A host sending Multicast DNS queries to a link-local destination address
   (including the 224.0.0.251 link-local multicast address) MUST verify that
   the IP TTL in response packets is 255, and silently discard any response
   packets where the IP TTL is not 255. See the IP_RECVTTL socket option.

-  Multicast DNS is a new protocol and doesn't (yet) have old buggy
   legacy implementations to constrain the design choices. Accordingly,
   it adopts the obvious simple solution: all names in Multicast DNS are
   encoded using UTF-8 [RFC 2279].

-  Multicast DNS Messages carried by UDP may be up to the IP MTU of the
   physical interface, less the space required for the IP header (20
   bytes for IPv4; 40 bytes for IPv6) and the UDP header (8 bytes).

   --> does Message truncate?

19.2. QR (Query/Response) Bit

   In query messages, MUST be zero.

19.3. OPCODE

   In both multicast query and multicast response messages, MUST be zero
   (only standard queries are currently supported over multicast, unless
   other queries are allowed by future IETF Standards Action).

19.4. AA (Authoritative Answer) Bit

   In query messages, the Authoritative Answer bit MUST be zero on
   transmission, and MUST be ignored on reception.

19.6. RD (Recursion Desired) Bit

   In both multicast query and multicast response messages, the
   Recursion Desired bit SHOULD be zero on transmission, and MUST be
   ignored on reception.

19.7. RA (Recursion Available) Bit

   In both multicast query and multicast response messages, the
   Recursion Available bit MUST be zero on transmission, and MUST be
   ignored on reception.

19.8. Z (Zero) Bit

   In both query and response messages, the Zero bit MUST be zero on
   transmission, and MUST be ignored on reception.

19.9. AD (Authentic Data) Bit [RFC 2535]

   In query messages the Authentic Data bit MUST be zero on
   transmission, and MUST be ignored on reception.


