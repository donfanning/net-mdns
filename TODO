TODO

Release: 0.0  "proof of concept" - done


Release: 0.1  "make it work"

- reintegrate into resolver



Release: 0.2  "do the right thing"

- correctly encode a nil in a text_record, and allow "key" w/no value for mdns.rb -R

- implement flags, particularly add/remove flags

- don't register a service that already exists

- set cacheflush bits, as appropriate, for service registration

- when we see a question, flush answers over a few seconds old from cache
    .. and do we notify queries that the answers are being deleted, too?

- escape/parse DNS-SD names ...

- try the meta-queries (_services._dns-sd._udp.local.)

- add known answers to queries

- answer unicast questions

- implement a MDNSSD api for DNSServiceQueryRecord, and mdns.rb -Q

Release: 0.3  "make it pretty"

- mdns.rb -K, watch for records and immediately register replacements pointing
  to somewhere else

- general code cleanups

- Add #to_s to the RR types.

- Add #to_s the *classes* of the RR types ("IN::TXT", ...)

- HINFO RR service

- A RR service

- wildcard answering services

- Query#start, #restart

- let Query.new take a block, and yield itself, or yield with every answer?

- move hierarchal DNS Name comparison operators to an optional file.

- DNS packet dumper



dns-sd test mode results:
   -A  ok, but don't support -Q so don't see HINFO add/update/remove
   -U  ok
   -N  ok, but don't support -Q so don't see NULL add
   -T  ok
   -M  no, we don't support multiple TXT records for a service
   -I  ok




Open design issues:

- how to get the local ifx ipv4 address?

- Net classes that do socksetopts, so you don't have to pack the structs
  yourself! or maybe implement the 8 functions of Stevens?

- Reverse DNS lookups are done by sock.recv, seems like its a problem for a
  DNS library...

  Shouldn't BasicSocket.do_not_reverse_lookup be set? Or be set on our sockets?
  It's weird that in @sock.recv we get a tuple with the address... when we ARE
  a resolver library.... and if you call resolv-replace, won't we call
  ourselves in order to resolve the IP when you call recv to get the peer info?
  And isn't resolv-replace ignoring BasicSocket.do_not_reverse_lookup?  So, it
  is very weird that resolv.rb does ad socket.recv that causes (blocking) DNS
  queries to occure for its peer IP address...

    Related: run ga using -r resolv-replace, see if ruby does the CNAME thing...


