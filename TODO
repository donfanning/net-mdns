TODO

Release: 0.0  "seeing if its possible" - done


Release: 0.1  "making it work"

- need to send TTL=0 message on service shutdown

- Safari doesn't see my services!


  A complete rewrite, too many changes to even mention, other than it now has
  an almost-DNSSD compatible API, and supports advertising services.



Release: 0.2  "doing the right thing"

- implement flags, particularly add/remove flags

- remove the use of absolute in name comparisons, I have had one too many bug
  involving this, I don't care if Tanaka thinks its not correct

- deal with timeouts in Resolv::MDNS

- reverse lookups of names by addresses using mDNS, see notes in #generate_candidates

- correctly encode a nil in a text_record, and allow "key" w/no value for mdns.rb -R

- don't register a service that already exists

- set cacheflush bits, as appropriate, for service registration

- when we see a question, flush answers over a few seconds old from cache
    .. and do we notify queries that the answers are being deleted, too?

- escape/parse DNS-SD names ...

- try the meta-queries (_services._dns-sd._udp.local.)

- add known answers to queries

- answer unicast questions

- implement a MDNSSD api for DNSServiceQueryRecord, and mdns.rb -Q



Release: 0.3  "making it pretty"

- define constants in module MDNSSD::Types  like Http = '_http._tcp', ...?

- mdns.rb -K, watch for records and immediately register replacements pointing
  to somewhere else

- general code cleanups

- Add #to_s to the RR types.

- Add #to_s the *classes* of the RR types ("IN::TXT", ...)

- HINFO RR service

- A RR service

- wildcard answering services

- Query#start, #restart

- let Query.new take a block, and yield itself, or yield with every answer?

- move hierarchal DNS Name comparison operators to an optional file.

- DNS packet dumper

- to make both TXT objects and TXT classes have a value,
  add methods type_value and type_class.



dns-sd test mode results:
   -A  ok, but don't support -Q so don't see HINFO add/update/remove
   -U  ok
   -N  ok, but don't support -Q so don't see NULL add
   -T  ok
   -M  no, we don't support multiple TXT records for a service
   -I  ok



Open resolv.rb issues:

- push diffs back to ruby-core

- Reverse DNS lookups are done by sock.recv, seems like its a problem for a
  DNS library...

  Shouldn't BasicSocket.do_not_reverse_lookup be set? Or be set on our sockets?
  It's weird that in @sock.recv we get a tuple with the address... when we ARE
  a resolver library.... and if you call resolv-replace, won't we call
  ourselves in order to resolve the IP when you call recv to get the peer info?
  And isn't resolv-replace ignoring BasicSocket.do_not_reverse_lookup?  So, it
  is very weird that resolv.rb does ad socket.recv that causes (blocking) DNS
  queries to occure for its peer IP address...

- Resolv::Hosts returns IPv6 addresses before IPv4, so Resolv.getaddress('localhost')
  is ::1 on my system - this is not good.

- Resolv.getaddresses accepts a domain name, a string that looks like an IP addr (yielded
  directly), but dies when it gets a Fixnum, which is a valid IP address for Socket calls.


Open design issues:

- how to get the local ifx ipv4 address?

- Net classes that do socksetopts, so you don't have to pack the structs
  yourself! or maybe implement the 8 functions of Stevens?


System differences in multicast:

[EACCES]           The destination address is a broadcast address, and
SO_BROADCAST has not been set on the socket.


